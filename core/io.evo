def newline(... file) ; TODO space and tab functions, accept number of instead
  if (or nil?(file) nil?(rst(file)))
    write fst((or file '(stdout))) file "\n"
    error 'newline "only zero or one file can be given"

def display(... vals)
  "Convert values to string which evaluates to itself
  Used when displaying output of repl"
  apply Str
    map
      @(cond
          string?(it): (Str "\"" it "\"") ; TODO insert escape characters for non-printable
          true?(it):   (Str it) ; don't quote True symbol since it's self evaluating
          symbol?(it): (Str "'" it) ; TODO if contains non symbol char print as explicit sym syntax
          pair?(it):
            (Str
              "["
              display(fst(it))
              (or (walk
                    Func((x) (if pair?(x)
                               Str(" " display(fst(x)))
                               Str(" ... " display(x))))
                    rst(it))
                  "")
              "]")
          record?(it):
            (Str
              "{ "
              (or (map Func((x) Str(fst(x) ": " display(rst(x)) " ")) records(it))
                  "")
              "}")
         else: (Str it))
      vals

def print(... str)      write('stdout Nil ... str)
def println(... str)    print(... str) (newline)
def printerr(... str)   write('stderr Nil ... str)
def printerrln(... str) printerr(... str) (newline)

; TODO % stack of prev res, %% = fst %
; TODO argument to change parse, eval, display
def (repl)
  "Read, evaluate, print, loop
  To exit enter quit or press CTRL-D"
  print "> "
  let (expr: parse(read()))
    unless (= expr 'quit)
      ; TODO push ans to stack of outputs
      let (ans: eval(expr)) ; env{ :% %%: fst(%) }
        unless void?(ans)
          println display(ans)
        (repl)

def (repl-simple)
  "Simple REPL interface, only dependencies are builtin functions, no eevo code
  To exit enter quit or press CTRL-D
  See repl for more advanced REPL with prettier printing"
  write 'stdout Nil "> "
  (Func (expr)
     (cond
       ((= expr 'quit))
       (else
         write('stdout Nil eval(expr) "\n")
         (repl-simple))))(parse(read()))
